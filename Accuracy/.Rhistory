#Linear Regression Model
linMod <- lm(made ~ x.ax)
print(linMod)
m <- round(unname(linMod$coefficients[2]), digits = 3)
b <- round(unname(linMod$coefficients[1]), digits = 1)
string <- "Y = {m}x + {b}"
#Plot Data with linear regression
my_annotate = grobTree(textGrob(glue(string), x = 0.1, y = 0.95, hjust = 0,
gp = gpar(col = 'black', fontsize = 12, fontface = "italic")))
ggplot(df, aes(x = x.ax, y = Made)) +
geom_point(size = 2, shape = 16, col = 'black') +
geom_smooth(method= 'lm', se = TRUE) +
labs(title = 'Made Bags Over Time',
x = "Number of Throwing Sessions",
y = 'Bags Made Per Session')+
theme(plot.title = element_text(hjust = 0.5, size = 15))+
annotation_custom(my_annotate)
require(moments)
require(ggplot2)
prices <- read.csv("/Users/mikeysoukup/Desktop/NU MSDS/MSDS 401/Module 9/homes.csv",
sep=",")
str(prices)
summary(prices)
baths <- factor(prices$Baths)
fire <- factor(prices$Fire)
S <- prices$Sales
T <- prices$Taxes
prices <- data.frame(prices, S, T, baths, fire)
str(prices)
ms <- aggregate(S~(baths+fire), data = prices, mean)
ms
mt <- aggregate(T~(baths+fire), data = prices, mean)
mt
overview <- cbind(ms,mt)
overview
overview <- cbind(ms,mt)
ms <- aggregate(S~(baths+fire), data = prices, mean)
mt <- aggregate(T~(baths+fire), data = prices, mean)
mt <- mt[,3]
overview <- cbind(ms,mt)
overview
overview <- cbind(ms,mt)
colnames(overview) <- c("Baths","Fireplaces", "Sales Price", "Taxes")
overview
ggplot(data = df2, aes(x = x.ax, y = df.Made)) +
geom_point() +
labs(x = 'Session Number', y = "Bags Made per 100")
ggplot(data = df2, aes(x = x.ax, y = df.Made)) +
geom_point() +
labs(x = 'Session Number', y = "Bags Made per 100") +
ggtitle("Test")
?lm
rs <- lm(S~T+baths, data=prices)
summary(rs)
rs <- lm(S~T+baths+fire, data=prices)
summary(rs)
rs <- lm(S~T+baths, data=prices)
summary(rs)
std <- 5.523
std
p <- ggplot(prices, aes(x = T, y = S))+geom_point(aes(color = baths), size = 4)+
ggtitle("Plot of Sales Price versus Taxes Colored by Number of Baths")
p
p + geom_abline(intercept=78.709, slope=10.669)+geom_abline(intercept=84.47,slope=10.669)
# Further analysis of residuals is necessary to evaluate the goodness of fit.
r <- residuals(rs)
r
table(r)
r
fit <- fitted(rs)
fit
?residuals
?fitted
rs <- lm(S~T+baths, data=prices)
summary(rs)
x <- c(19,20,26,31,34,45,45,51)
y <- c(78, 100, 125, 120, 119, 130, 145, 143)
df <- data.frame(x,y)
df
x <- c(19,20,26,31,34,45,45,51)
y <- c(78, 100, 125, 120, 119, 130, 145, 143)
df <- data.frame(x,y)
mod <- lm(y~x, data = df)
summary(mod)
?cor
cor(y~x)
cor(x = x, y = y)
cor(x = x, y = y)
plot(x,y, type = "p", col = "blue")
mod <- lm(y~x, data = df)
summary(mod)
plot(x,y, type = "p", col = "blue")
lines(x = x , y = 65.5951 + 1.6060*x)
plot(x,y, type = "p", col = "blue")
lines(x = x , y = 65.5951 + 1.6060*x, lty = 2)
cor(x = x, y = y)
x <- c(-10,-6,1,4,15)
y <- c(-26,-44,-36,-39,-43)
df <- data.frame(x,y)
mod <- lm(y~x, data = df)
summary(mod)
x <- c(-10,-6,1,4,15)
y <- c(-26,-44,-36,-39,-43)
df <- data.frame(x,y)
mod <- lm(y~x, data = df)
summary(mod)
cor(x,y)
plot(x,y,type = "p", col = "blue")
lines(x,y = -37.2529 + -0.4338*x, col = "red", lty = 2)
x <- c(2,9,11,19,21,25)
y <- c(26,17,18,15,15,8)
df <- data.frame(x,y)
x <- c(2,9,11,19,21,25)
y <- c(26,17,18,15,15,8)
df <- data.frame(x,y)
df
x <- c(2,9,11,19,21,25)
y <- c(26,17,18,15,15,8)
df <- data.frame(x,y)
mod <- lm(y~x, data = df)
summary(mod)
x <- c(12,11,5,6,9)
y <- c(31,25,14,12,16)
df <- data.frame(x,y)
mod <- lm(y~x, data = df)
summary(mod)
0.1764*(11) + 12.224
16-14.1644
sqrt(1203/8)
b1 <- ((2438)-((276*77)/7))/((12014)-((276^2)/7))
b1
SSE <- 1183 - (b0*77) - (b1*2438)
b1 <- ((2438)-((276*77)/7))/((12014)-((276^2)/7))
b0 <- (77/7)-(b1)*(276/7)
SSE <- 1183 - (b0*77) - (b1*2438)
SSE
se <- sqrt(SSE/5)
se
27.9*2
SSE <- 134451 - (59.4798*1019) - (.19364*378932)
r_2 <- 1-((SSE)/(134451-((1019^2)/8)))
r_2
x <- c(18,14,9,6,2)
y <- c(14, 25, 22, 23, 27)
x <- c(18,14,9,6,2)
y <- c(14, 25, 22, 23, 27)
df <- data.frame(x,y)
mod <- lm(y~x, data = df)
summary(mod)
qt(0.995, df = 14)
x <- c(22,20,15,15,14,9)
y <- c(31,20,12,9,10,6)
df <- data.frame(x,y)
x <- c(22,20,15,15,14,9)
y <- c(31,20,12,9,10,6)
df <- data.frame(x,y)
mod <- lm(y~x, data = df)
summary(mod)
length(x)
qt(0.975, df = 4)
year <- c(1,2,3,4,5,6,7)
sales <- c(230,246,251,254,272,283,299)
df <- data.frame(year, sales)
mod <- lm(sales ~ year, data = df)
summary(mod)
year <- c(1,2,3,4,5,6,7)
sales <- c(230,246,251,254,272,283,299)
df <- data.frame(year, sales)
mod <- lm(sales ~ year, data = df)
summary(mod)
plot(sales ~ year, data = df, type = "p", col = "blue")
lines(x = year, y = 219 + 10.7857*year, lty = 2, col = "red")
10.7857*10
10.7857*10
.Last.value + 219
#First read in libraries
library(ggplot2)
library(dplyr)
library(ggpubr)
library(RPostgres)
library(DBI)
library(grid)
library(glue)
library(png)
library(gridExtra)
#Define the database specific information
db <- 'Accuracy'
host_db <- 'localhost'
db_port <- 5432
db_user <- 'postgres'
db_password <- 'iamgreat'
#establish connection to database
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port,
user=db_user, password=db_password)
#Read in data from PostgreSQL
df <- dbGetQuery(con, 'SELECT *
FROM public.heatmapdata
WHERE id = 1
ORDER BY "date" ASC')
#df <- df[df$date == '2020-09-08',]
#df <- df[df$side_of_board == 'left',]
#Set up empty matrices
land.mat <- matrix(data = 0, nrow = 8, ncol = 5)
rownames(land.mat) <- c("1","2","3","4","5","6","7","8")
colnames(land.mat) <- c("1","2","3","4","5")
out.mat <- matrix(data = 0, nrow = 8, ncol = 5)
rownames(out.mat) <- c("1","2","3","4","5","6","7","8")
colnames(out.mat) <- c("1","2","3","4","5")
#Fill in matrices from recorded data
for (i in 1:nrow(df)){
if (df[i,]$h_landzone == 1){
if (df[i,]$v_landzone == 1){
land.mat[1,1] <- land.mat[1,1] + 1
if (df[i,]$outcome == 1){
out.mat[1,1] <- out.mat[1,1] + 1
}
}
if (df[i,]$v_landzone == 2){
land.mat[2,1] <- land.mat[2,1] + 1
if (df[i,]$outcome == 1){
out.mat[2,1] <- out.mat[2,1] + 1
}
}
if (df[i,]$v_landzone == 3){
land.mat[3,1] <- land.mat[3,1] + 1
if (df[i,]$outcome == 1){
out.mat[3,1] <- out.mat[3,1] + 1
}
}
if (df[i,]$v_landzone == 4){
land.mat[4,1] <- land.mat[4,1] + 1
if (df[i,]$outcome == 1){
out.mat[4,1] <- out.mat[4,1] + 1
}
}
if (df[i,]$v_landzone == 5){
land.mat[5,1] <- land.mat[5,1] + 1
if (df[i,]$outcome == 1){
out.mat[5,1] <- out.mat[5,1] + 1
}
}
if (df[i,]$v_landzone == 6){
land.mat[6,1] <- land.mat[6,1] + 1
if (df[i,]$outcome == 1){
out.mat[6,1] <- out.mat[6,1] + 1
}
}
if (df[i,]$v_landzone == 7){
land.mat[7,1] <- land.mat[7,1] + 1
if (df[i,]$outcome == 1){
out.mat[7,1] <- out.mat[7,1] + 1
}
}
if (df[i,]$v_landzone == 8){
land.mat[8,1] <- land.mat[8,1] + 1
if (df[i,]$outcome == 1){
out.mat[8,1] <- out.mat[8,1] + 1
}
}
}
if (df[i,]$h_landzone == 2){
if (df[i,]$v_landzone == 1){
land.mat[1,2] <- land.mat[1,2] + 1
if (df[i,]$outcome == 1){
out.mat[1,2] <- out.mat[1,2] + 1
}
}
if (df[i,]$v_landzone == 2){
land.mat[2,2] <- land.mat[2,2] + 1
if (df[i,]$outcome == 1){
out.mat[2,2] <- out.mat[2,2] + 1
}
}
if (df[i,]$v_landzone == 3){
land.mat[3,2] <- land.mat[3,2] + 1
if (df[i,]$outcome == 1){
out.mat[3,2] <- out.mat[3,2] + 1
}
}
if (df[i,]$v_landzone == 4){
land.mat[4,2] <- land.mat[4,2] + 1
if (df[i,]$outcome == 1){
out.mat[4,2] <- out.mat[4,2] + 1
}
}
if (df[i,]$v_landzone == 5){
land.mat[5,2] <- land.mat[5,2] + 1
if (df[i,]$outcome == 1){
out.mat[5,2] <- out.mat[5,2] + 1
}
}
if (df[i,]$v_landzone == 6){
land.mat[6,2] <- land.mat[6,2] + 1
if (df[i,]$outcome == 1){
out.mat[6,2] <- out.mat[6,2] + 1
}
}
if (df[i,]$v_landzone == 7){
land.mat[7,2] <- land.mat[7,2] + 1
if (df[i,]$outcome == 1){
out.mat[7,2] <- out.mat[7,2] + 1
}
}
if (df[i,]$v_landzone == 8){
land.mat[8,2] <- land.mat[8,2] + 1
if (df[i,]$outcome == 1){
out.mat[8,2] <- out.mat[8,2] + 1
}
}
}
if (df[i,]$h_landzone == 3){
if (df[i,]$v_landzone == 1){
land.mat[1,3] <- land.mat[1,3] + 1
if (df[i,]$outcome == 1){
out.mat[1,3] <- out.mat[1,3] + 1
}
}
if (df[i,]$v_landzone == 2){
land.mat[2,3] <- land.mat[2,3] + 1
if (df[i,]$outcome == 1){
out.mat[2,3] <- out.mat[2,3] + 1
}
}
if (df[i,]$v_landzone == 3){
land.mat[3,3] <- land.mat[3,3] + 1
if (df[i,]$outcome == 1){
out.mat[3,3] <- out.mat[3,3] + 1
}
}
if (df[i,]$v_landzone == 4){
land.mat[4,3] <- land.mat[4,3] + 1
if (df[i,]$outcome == 1){
out.mat[4,3] <- out.mat[4,3] + 1
}
}
if (df[i,]$v_landzone == 5){
land.mat[5,3] <- land.mat[5,3] + 1
if (df[i,]$outcome == 1){
out.mat[5,3] <- out.mat[5,3] + 1
}
}
if (df[i,]$v_landzone == 6){
land.mat[6,3] <- land.mat[6,3] + 1
if (df[i,]$outcome == 1){
out.mat[6,3] <- out.mat[6,3] + 1
}
}
if (df[i,]$v_landzone == 7){
land.mat[7,3] <- land.mat[7,3] + 1
if (df[i,]$outcome == 1){
out.mat[7,3] <- out.mat[7,3] + 1
}
}
if (df[i,]$v_landzone == 8){
land.mat[8,3] <- land.mat[8,3] + 1
if (df[i,]$outcome == 1){
out.mat[8,3] <- out.mat[8,3] + 1
}
}
}
if (df[i,]$h_landzone == 4){
if (df[i,]$v_landzone == 1){
land.mat[1,4] <- land.mat[1,4] + 1
if (df[i,]$outcome == 1){
out.mat[1,4] <- out.mat[1,4] + 1
}
}
if (df[i,]$v_landzone == 2){
land.mat[2,4] <- land.mat[2,4] + 1
if (df[i,]$outcome == 1){
out.mat[2,4] <- out.mat[2,4] + 1
}
}
if (df[i,]$v_landzone == 3){
land.mat[3,4] <- land.mat[3,4] + 1
if (df[i,]$outcome == 1){
out.mat[3,4] <- out.mat[3,4] + 1
}
}
if (df[i,]$v_landzone == 4){
land.mat[4,4] <- land.mat[4,4] + 1
if (df[i,]$outcome == 1){
out.mat[4,4] <- out.mat[4,4] + 1
}
}
if (df[i,]$v_landzone == 5){
land.mat[5,4] <- land.mat[5,4] + 1
if (df[i,]$outcome == 1){
out.mat[5,4] <- out.mat[5,4] + 1
}
}
if (df[i,]$v_landzone == 6){
land.mat[6,4] <- land.mat[6,4] + 1
if (df[i,]$outcome == 1){
out.mat[6,4] <- out.mat[6,4] + 1
}
}
if (df[i,]$v_landzone == 7){
land.mat[7,4] <- land.mat[7,4] + 1
if (df[i,]$outcome == 1){
out.mat[7,4] <- out.mat[7,4] + 1
}
}
if (df[i,]$v_landzone == 8){
land.mat[8,4] <- land.mat[8,4] + 1
if (df[i,]$outcome == 1){
out.mat[8,4] <- out.mat[8,4] + 1
}
}
}
if (df[i,]$h_landzone == 5){
if (df[i,]$v_landzone == 1){
land.mat[1,5] <- land.mat[1,5] + 1
if (df[i,]$outcome == 1){
out.mat[1,5] <- out.mat[1,5] + 1
}
}
if (df[i,]$v_landzone == 2){
land.mat[2,5] <- land.mat[2,5] + 1
if (df[i,]$outcome == 1){
out.mat[2,5] <- out.mat[2,5] + 1
}
}
if (df[i,]$v_landzone == 3){
land.mat[3,5] <- land.mat[3,5] + 1
if (df[i,]$outcome == 1){
out.mat[3,5] <- out.mat[3,5] + 1
}
}
if (df[i,]$v_landzone == 4){
land.mat[4,5] <- land.mat[4,5] + 1
if (df[i,]$outcome == 1){
out.mat[4,5] <- out.mat[4,5] + 1
}
}
if (df[i,]$v_landzone == 5){
land.mat[5,5] <- land.mat[5,5] + 1
if (df[i,]$outcome == 1){
out.mat[5,5] <- out.mat[5,5] + 1
}
}
if (df[i,]$v_landzone == 6){
land.mat[6,5] <- land.mat[6,5] + 1
if (df[i,]$outcome == 1){
out.mat[6,5] <- out.mat[6,5] + 1
}
}
if (df[i,]$v_landzone == 7){
land.mat[7,5] <- land.mat[7,5] + 1
if (df[i,]$outcome == 1){
out.mat[7,5] <- out.mat[7,5] + 1
}
}
if (df[i,]$v_landzone == 8){
land.mat[8,5] <- land.mat[8,5] + 1
if (df[i,]$outcome == 1){
out.mat[8,5] <- out.mat[8,5] + 1
}
}
}
}
#Get totals made and totals landed from each matrix
throws.landed <- sum(land.mat)
throws.made <- sum(out.mat)
#Convert the matrix data into a data frame
land.df <- as.data.frame(as.table(land.mat))
names(land.df)[1] <- "Y"
names(land.df)[2] <- "X"
names(land.df)[3] <- "LandFreq"
out.df <- as.data.frame(as.table(out.mat))
names(out.df)[1] <- "Y"
names(out.df)[2] <- "X"
names(out.df)[3] <- "MakeFreq"
#Freq = Counts; Prop = Proportions
#Convert Landed Frequencies to Landed Proportions
land.df$LandProp <- round(100*(land.df$LandFreq/throws.landed), digits = 2)
#Put Make Counts into the land.df dataframe
land.df$MakeFreq <- out.df$MakeFreq
#TotMakeProp = Proportion of made throw at that location over the total made
land.df$TotMakeProp <- round(100*(land.df$MakeFreq/throws.made), digits = 2)
#RelMakeProp = What percentage of bags made that landed at that location
land.df$RelMakeProp <- round(100*(land.df$MakeFreq/land.df$LandFreq), digits = 2)
#Get rid of NaN in the data frame and replace with 0
land.df[is.na(land.df)] <- 0
#Re-create same plots above with board background image
img <- png::readPNG('/Users/mikeysoukup/Desktop/Python/Accuracy/W_bag_board.png')
Now plot the data | with geom_bin2d() | Plot Relative Make Proportion
ggplot(land.df, aes(x = X, y = Y, fill = RelMakeProp)) +
background_image(img) +
geom_bin2d(alpha = 0.8) +
scale_fill_gradient(low = "white", high = "firebrick") +
coord_fixed() +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
#First read in libraries
library(ggplot2)
library(dplyr)
library(ggpubr)
library(RPostgres)
library(DBI)
library(grid)
library(glue)
library(png)
library(gridExtra)
#Define the database specific information
db <- 'Accuracy'
host_db <- 'localhost'
db_port <- 5432
db_user <- 'postgres'
db_password <- 'iamgreat'
#establish connection to database
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port,
user=db_user, password=db_password)
